// Code generated by vfsgen; DO NOT EDIT.

package install

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
		},
		"/flux-account.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-account.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 836,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4b\xaf\xd3\x30\x10\x85\xf7\xfe\x15\x47\xba\x8b\x0b\xe8\x26\xa8\x3b\x94\x5d\xdb\x05\x0b\x10\x8b\xf0\xd8\x20\x16\x63\x7b\x42\x4d\x5d\x3b\xf2\x23\x3c\xa2\xfc\x77\x94\xa4\x95\x9a\xb6\x20\x55\xba\x3b\x7b\x7c\xc6\x73\xe6\xe8\x2b\x8a\x42\x3c\xe0\xd3\x8e\x11\x39\x74\x46\x31\x48\x29\x9f\x5d\x7a\x82\xb2\x39\x26\x0e\x08\xde\x72\x7c\x02\x39\xbd\x28\x41\x1a\xa7\x8d\xfb\x0e\x0a\x2c\x1e\xe0\x9d\xfd\x0d\xc7\xac\x59\xa3\xf1\x01\xef\xb2\xe4\xe0\x38\x71\xc4\x4f\x93\x76\x53\x4b\x21\x29\xb2\x1e\x27\x70\x8c\x50\xde\xa5\xe0\x2d\x5e\xd4\x9b\xf5\xf6\x65\x29\xa8\x35\x5f\x38\x44\xe3\x5d\x85\x6e\x25\xf6\xc6\xe9\x0a\x1f\x67\x57\xeb\xd9\x94\x38\x70\x22\x4d\x89\x2a\x01\x58\x92\x6c\xe3\x78\x02\x1c\x1d\xb8\x42\x63\xf3\x2f\x71\x7e\xe9\x7b\x98\x06\xe5\x07\x3a\x70\x6c\x49\x31\x86\xe1\xf8\x3e\x5d\x2b\xf4\xfd\xf2\xb5\xef\xc1\x4e\x0f\x83\x18\x73\x39\x37\x14\x24\xa9\x92\x72\xda\xf9\x60\xfe\x50\x32\xde\x95\xfb\x37\xb1\x34\xfe\x75\xb7\x92\x9c\xe8\xe4\x77\x3b\x27\x54\x7b\xcb\xf7\x9a\x15\x21\x5b\x9e\x24\x05\xa8\x35\x6f\x83\xcf\x6d\xac\xf0\xf5\xf1\xd5\xe3\xb7\xa9\x2f\x70\xf4\x39\x28\x5e\x14\x3b\x0e\xf2\xac\x50\xc0\x79\x57\x1f\x85\x9f\xeb\xf7\xff\xd6\x3e\xc3\x86\x9b\x99\x80\xfb\x17\xf5\x96\x6b\x6e\x46\xd1\x69\xd1\xff\xcc\x17\xc0\x75\xb6\x8b\xff\x62\x96\x3f\x58\xa5\x63\x76\x37\xc1\xb9\xb2\x73\x89\xc1\x25\x27\xb7\xc8\xb0\x71\x3c\x69\x6e\x28\xdb\x34\xa3\x32\x12\xf5\x37\x00\x00\xff\xff\xfd\x7f\x67\x6a\x44\x03\x00\x00"),
		},
		"/flux-deployment.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-deployment.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 7265,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\xdd\x6f\x1b\x37\x12\x7f\xf7\x5f\x31\x50\x0e\x48\x0c\x48\x2b\x3b\x6e\x8b\xc3\xf6\x54\x5c\x9a\x0f\x37\x97\x26\x35\xec\xe4\x0e\x7d\xaa\x29\xee\x48\x4b\x88\x4b\xee\x71\xb8\x52\x05\xa1\xff\xfb\x61\xc8\xfd\xe0\xca\xb2\x53\xf4\xed\xf2\x10\xdb\xbb\xc3\xe1\xcc\x6f\xbe\x7e\xe4\xce\x66\xb3\x33\x51\xab\x7f\xa3\x23\x65\x4d\x0e\xa2\xae\x69\xbe\xbd\x3c\xdb\x28\x53\xe4\xf0\x06\x6b\x6d\xf7\x15\x1a\x7f\x56\xa1\x17\x85\xf0\x22\x3f\x03\x30\xa2\xc2\x1c\x56\xba\xf9\xfd\x70\x00\xb5\x82\xec\x93\xa8\x90\x6a\x21\x11\xfe\xf8\xa3\x7d\x1f\xfe\xcc\xe1\x70\x18\xbf\x3d\x1c\x00\x4d\xc1\x62\x54\xa3\x64\x65\x0e\x6b\xad\xa4\xa0\x1c\x2e\xcf\x00\x08\x35\x4a\x6f\x1d\xbf\x01\xa8\x84\x97\xe5\xcf\x62\x89\x9a\xe2\x83\x74\x6f\x96\xf6\x4e\x78\x5c\xef\xe3\x4b\xbf\xaf\x31\x87\x5b\x94\x0e\x85\xc7\x33\x00\x8f\x55\xad\x85\xc7\x56\x59\xe2\x01\xff\x13\xc6\x58\x2f\xbc\xb2\xa6\x57\x0e\x50\x3b\x5b\xa1\x2f\xb1\xa1\x4c\xd9\x79\x6d\x9d\xcf\x61\x72\x75\x71\x75\x39\x81\x67\xe0\x51\xeb\x44\x02\xbc\x05\x92\x4e\xd4\x08\xf3\x0a\xbd\x53\x92\xd8\xb9\xda\x2a\xe3\x9f\x13\xf0\xe2\xac\x55\xac\x47\x3e\x1c\x79\x01\xd0\x61\x11\x5e\xd9\x02\xef\x46\x28\xf0\xbf\x25\x7a\x91\x6d\x9a\x25\x3a\x83\x1e\x83\x71\x96\x72\xd0\xca\xb4\x2a\x18\x3a\xb7\x55\x12\x5f\x49\x69\x1b\xe3\x3f\x8d\x77\x00\xd8\x5a\xdd\x54\xd8\xdb\x30\x6b\x6d\x58\x2b\x3f\xdb\xe0\xbe\xdf\x88\x18\x3e\x3f\x6c\xdc\x3d\x19\xf4\xcd\x78\x49\x11\x32\x23\x91\x2a\x70\x25\x1a\xed\x3f\xda\x02\x73\xb8\xf8\xe6\xe2\x02\x9e\xc1\xae\x44\x03\x15\x5b\x83\x05\x38\x14\xc5\xcc\x1a\xbd\x9f\xc2\x0e\x61\x67\xcd\x73\x0f\x4b\x04\xb1\xd4\xc8\x40\xca\xb2\xb2\xc5\x59\xab\xf0\x19\x7c\x2e\x15\x81\x22\x10\xe0\xab\x7a\x45\xd0\x10\x16\xb0\xb2\x0e\xd6\x68\xd0\x09\xaf\xcc\x1a\xee\xee\x7e\x82\x0d\xee\x29\x83\xf7\x06\x3e\xfc\x9d\xe0\x87\x05\x5c\x66\x97\x17\xd3\x5e\x4b\xb7\x77\x74\x81\x40\x38\x4c\xed\x20\xcb\xa6\x18\xc4\x02\x04\x10\xd6\x82\xb3\xa9\x05\x0a\x76\xd8\xab\x91\xc2\xc0\xce\x29\xcf\x86\x66\xa7\xf1\x5b\xa3\xe9\xc1\xc0\xaa\xf6\xfb\x37\xca\xa5\x20\x56\x58\xa8\xa6\xca\xe1\x23\x56\xd6\xed\x53\x3f\x11\x56\x56\x6b\xbb\x63\x8f\xda\xad\x15\x05\x57\x1b\xe2\x67\x02\x64\x43\xde\x56\x8a\x11\xd8\x18\xbb\x33\xbf\x95\x96\x3c\xf5\x2a\x56\x4a\xe3\x14\x76\xa5\x92\x25\xec\x6d\x03\x3b\xa5\x75\x74\xca\x5b\x28\x2c\x17\x28\x3f\xe6\x45\xfc\x8b\x03\xbb\x33\x6c\x76\xaf\xc0\x61\x6d\xc1\x09\x5f\xa2\x03\x5f\x0a\xd3\x6e\xbc\x56\xbe\x6c\x96\x60\xf9\x21\x82\x56\x1b\xcc\xe0\x57\xdb\x3c\xd7\x1a\x84\x26\xdb\x6d\x31\x06\x1b\x94\x07\x65\xbc\x0d\x6b\xa4\x35\x5e\x28\x83\x6e\x0a\x4b\xd4\x76\x97\xc1\x1d\x0e\xa8\x96\xde\xd7\x94\xcf\xe7\x85\x95\x94\x71\x62\xc9\x82\xd3\x1a\xcd\x9c\x6b\x96\xfc\x7c\xdd\xa8\x02\x69\xde\x10\xce\x6a\xa7\xb6\xc2\x63\x48\x3d\x76\xa4\x57\xd2\x85\x81\xa8\x9c\x49\x6b\x56\x6a\xdd\xbf\x02\x88\x0f\x3e\x8a\x3a\x4f\x1e\xa6\xc5\x37\x4b\x96\xfd\xd5\x90\x84\xaa\x9c\x47\x25\x43\xe6\x7d\x35\x1c\x3b\x45\x25\x3f\x29\xc5\x16\x41\x40\xa1\x56\x2b\x74\xdc\x68\x3b\x0d\x6d\x41\x0d\xcd\x34\xa0\x1f\xd5\xa5\xf8\x73\x43\xda\xaa\x02\x3b\xc4\x57\x6a\x5d\x89\x7a\x30\x44\xf9\x12\x84\x01\x34\xde\xed\x83\x0f\xf7\x51\xe8\x7e\x0a\xc2\x14\xd0\x18\x69\x2b\xee\xf0\x61\x7d\xf4\xf6\x63\x88\xa4\x30\x45\xaf\x05\xcd\x36\x68\x50\x48\x6d\x28\x1f\x44\x80\x61\xf8\x0b\x11\x48\x96\x7d\x35\x02\xa1\x09\x78\x0b\xaa\xe2\xde\x0a\xd7\x37\xd7\xa1\xfe\xe1\x05\xbb\x45\x6a\x6d\x94\x19\x36\x67\xe7\xb6\xe8\xd4\x4a\xc9\xd0\xe4\xa1\x6e\x5c\x6d\x09\xe9\xfc\x4f\x00\xd9\x6b\x89\x9d\x23\xa2\xc8\x00\xf1\x7e\x7f\x02\x38\x10\x6e\x3d\x54\xe8\x23\x88\xad\xeb\x35\xb7\x0e\x4a\xa0\x19\x77\xdf\x67\x8f\xf4\xdf\x87\xeb\x4e\xf4\xdf\x0e\xce\xbe\x08\x1f\xb4\xfe\x64\x38\xb4\xa8\x3b\x0c\x2d\xd2\x58\x98\xe4\xb1\x08\x27\xa0\x2a\xb1\xc6\x98\xfd\xbc\x20\x83\x77\xca\x14\xc1\xe7\x8a\x3b\x8a\x43\x39\x64\x6d\xec\x26\x1a\x05\x21\xf7\x8d\xb0\x94\x83\xc0\xdc\x02\x84\xef\x4b\xbe\x6c\x96\x59\x61\xe5\x06\x5d\x26\x6d\x35\x77\xf3\x58\xfe\xe1\xc7\xdc\x8b\x1e\xba\x2e\x8e\xcc\x11\x98\x3f\xf0\xae\x5e\xac\x81\x2d\xcd\x7a\x99\xb0\x4d\x0e\xad\x42\x65\x53\x6d\xf9\x65\xf6\xf2\x65\xf6\x72\x2c\x7b\xd3\x68\x7d\x63\xb5\x92\xfb\x1c\xde\xaf\x3e\x59\x7f\xe3\x90\x52\x2f\x1c\x92\x6d\x9c\x44\x4a\x5b\xb8\xc3\xff\x36\x48\x7e\xf4\x0c\x40\xd6\x4d\x0e\xdf\x5e\x54\xa3\x87\x55\xe8\xf2\x39\x7c\xf7\xcd\x47\x35\x50\x0b\xeb\xd2\xc5\xb3\x21\x32\x37\x81\x66\x5c\x5d\x5c\xf1\xd0\x54\x66\x65\x5d\x15\x52\x56\xe8\x5e\x5a\xab\x2d\x1a\x24\xba\x71\x76\x89\xa9\x05\x0c\xe9\xf5\x78\x60\xc7\xad\xa2\xc2\xf1\x63\xe1\xcb\x1c\xe6\xa2\x56\x11\xe9\xed\x77\x73\x55\xa0\xf1\xca\xef\xb3\xba\x59\x26\xb2\xca\x28\xaf\x84\x7e\x83\x5a\xec\xef\xb8\x3e\x0b\xca\xe1\xdb\x44\xc0\xab\x0a\x6d\xe3\x4f\xbc\xe3\xf9\xaa\xfe\x3f\x4c\x4d\x8a\x76\x14\x98\xd3\xcc\x08\xe2\x84\xbb\x89\x96\xa1\x97\xc1\xb2\x62\x4e\x54\x32\x37\xb4\x91\xad\x82\xb6\x6d\xbf\x59\x73\xc8\x40\x99\x98\x73\xcf\x29\xae\x21\x2a\xe7\xa3\x36\xd9\x61\xf6\x8b\xd1\xfb\x1c\xbc\x6b\x90\xb5\x31\xfd\x09\x1d\x6a\xd9\x36\x76\x2e\xa9\x1a\xdd\xca\x3a\x89\xac\x34\xf2\x1d\xa6\x3b\x8f\x19\x9e\x52\x92\xb1\xed\x5b\xe1\x5a\xdb\xa3\xd8\x5f\x33\x3f\xa9\xd1\xf7\x46\xea\x26\x74\x4e\x66\x6d\x71\xc0\x75\x5d\x35\xd2\x82\xaf\xb0\x98\x8e\xc7\x7c\xcf\x4b\x8f\x18\x46\xdf\x5d\xa1\x40\xa9\x85\x63\xb6\xb6\xb4\xdb\xa4\x01\x3c\x41\x03\x62\x7b\x4c\x9d\x77\xd6\xfa\x79\x46\x54\x3e\xea\x80\x30\xa3\x5d\x27\xc3\x88\x9a\xc4\x9d\xa7\x9d\x48\xa2\x01\xcd\x56\x39\x6b\xc2\x40\x88\xb3\x76\xf2\xe1\xcb\x8f\x6f\x5f\xff\xf2\xe9\xdd\xfb\xeb\x49\x1c\x01\x53\xc6\xc3\x6e\xd1\xb9\xf1\xbc\x4e\xd4\x84\x11\xb7\xdc\xc7\x69\xea\xf5\x29\x1f\x1f\x0c\xda\x87\x3e\x0e\xc9\xc9\xc2\x8f\x3a\xca\x33\x8f\x0f\x2b\xdd\x6e\xdc\xa2\x13\x2a\xd2\x5a\x17\x62\x92\xa8\x38\x26\x34\x69\xd0\x03\x9b\xe9\x58\xb7\x30\x20\xb4\x47\x67\x98\x55\x3f\xb0\x78\xe5\x6c\xc5\x69\xd1\x31\x96\x29\x08\xe2\x74\x6b\xa7\x2a\xc3\xa0\xad\xdc\xd0\xc3\x60\xa3\xd9\xe6\x27\x70\x19\xe0\x1e\xe1\xb2\x15\xba\xc1\x07\x98\x7c\x2d\x89\x8f\x73\xa0\x9b\xb9\x4f\x64\x00\x8f\xfc\xf1\xa8\x7f\x62\xd8\x3f\x92\x97\x2c\x15\xd9\xcd\x48\x6e\xdc\x1f\xbe\x56\x79\x3b\xc1\xa4\xc4\x02\x35\x75\xad\xf7\xf0\xd3\xe7\xcf\x37\xb0\x14\xa4\x24\x88\xc6\x97\x20\x1d\x86\x4e\x2a\x74\x9c\xea\xc3\x51\x80\x15\x6e\x95\x08\x8e\xdf\x5f\xbf\xff\xfc\xdb\xab\x2f\x9f\x7f\xfa\x72\xf7\xf6\xf6\x3e\xb8\xdb\x3f\xfa\xf0\xf6\xd7\xfb\x51\xc2\x6f\x85\x53\x7c\x90\xa3\x8e\x20\x27\x0a\x23\x7d\x39\x8a\xdf\x3b\x67\xab\x71\x0c\xa3\xd8\x2d\xae\xf2\x91\xe7\x23\xae\xc8\x8d\x8d\x5d\x18\x00\x60\xcc\xf3\x11\x1e\x11\x82\x78\x3c\xc5\x82\x27\xb1\x14\xb2\xc4\x82\x53\x2b\xcd\xed\x9e\x56\x33\x52\xac\x7d\x9a\x68\xb1\xae\xe5\xcd\xc9\x82\xf6\x78\x1d\x16\x4e\xc3\x26\x7c\x2c\x6c\x31\xf6\x25\x52\x9a\x0b\x03\x7b\xf5\x3b\xcb\x56\x36\x8c\x53\xa8\xb8\x70\x89\x10\x12\x11\x4a\xbb\x0b\x47\x5f\x6b\x0c\xca\x10\x32\xe5\xc7\xb9\x33\x9b\xf5\x0e\x84\x73\x0f\x6f\xbe\xe8\x1f\x65\x2d\xe9\xcb\x68\x2b\x33\xa9\x1b\xf2\xe8\x32\x6e\xe0\x3a\x85\xe4\x0b\xc5\x5e\x33\x40\xf1\x3a\x8a\xbe\xbf\x19\x39\xc5\x6d\x87\xd0\x87\xa3\xf5\x38\xb3\x07\x1b\x3a\x79\xce\x2e\xef\x58\x32\x1c\x76\x93\x11\x94\x5a\xdc\x4a\x2f\xce\x46\x2c\x53\x11\x54\x0d\x85\xc3\x7f\x40\x4f\x61\x11\xcb\x69\x19\x06\x5b\xe0\x78\xe1\xcc\xff\xa2\x3b\x48\x9f\xa7\xb6\x74\xcd\x25\x96\x21\x27\x70\x72\xf4\x1f\x19\xc2\xc3\x20\x0e\xb8\x59\xa1\xdc\xe2\xc1\xd8\x4b\xcd\xba\x4d\x18\xe6\x10\xbc\x2f\xb7\x3f\xc7\xbb\x09\x61\xd6\xf1\xdd\xb5\xf2\xe1\xbc\x4c\xca\x5b\xb7\xef\xdb\xf5\x3b\x66\xc6\x89\xba\xa7\x6a\x8e\xd3\x26\xf1\xbd\x2d\x99\x93\xe5\x94\xd6\x42\xc7\x9d\xff\xf6\x22\xad\xcc\xf3\x7c\xf8\xfb\xc3\xdb\x5f\xcf\xff\x19\x4f\xed\x81\x56\x37\x84\x6e\x3e\x18\x9b\xa5\x85\xce\xf8\x70\x39\x35\x4e\x2f\x0e\x07\xc8\xae\x95\x67\x67\xc3\xf5\xdd\x58\x62\xe9\x84\x91\x65\x27\xf4\x63\xf8\x2b\x5e\xe4\xa9\x55\x78\xc4\xfd\x8b\x4e\xad\x64\x0e\xc7\xeb\xee\x42\xa6\xd0\xbf\xac\x32\xc9\x82\xc9\x74\xd2\xde\x07\x6a\xc2\x74\xf9\xd3\x4d\xcd\x21\x27\x9e\x8c\xa7\xae\x4a\x18\xb5\x62\x4e\xce\x35\x44\xaa\x40\x17\xc3\x71\x74\xb2\x09\xd7\x11\x96\x10\x1a\x53\xa0\x3b\x8a\xb1\x43\x2d\xbc\xda\x62\xa0\x9c\xd4\x65\xe0\x7a\x14\xe7\xa3\x9a\xec\x9d\xa3\x66\x59\x28\x77\x39\x8d\x3f\x5f\xf6\x97\x9b\x03\x38\xe1\xf2\xf2\x14\x38\xe1\x46\xb0\x43\xb5\x93\x3a\xa1\xe0\x0b\xa1\x3b\xb5\x9e\x83\xdb\x47\x8e\x65\xe0\xf4\xfa\xb7\x95\x50\x27\x0d\x40\x7e\xd1\x69\xe8\xa4\x86\xeb\xd9\x93\xe1\x40\x6e\x25\x3b\xcb\x80\xa2\x09\x37\x77\x8c\x13\x4f\x6c\xe5\x8f\x0e\xe0\x29\x56\xed\xec\x6b\x27\xdb\xe2\x89\x51\xd7\xad\x68\x75\xf1\xaa\xc5\x3f\x36\xb8\x07\x55\xfc\xd0\x8b\x3d\x41\x67\x12\xab\x58\x85\xf0\x8d\xc3\xd1\x2d\xc0\x89\xbd\xc2\xeb\xfd\xac\x97\xa7\x51\xbb\xea\xba\x35\x28\x0f\xa5\xa0\x30\x8a\xad\xd1\x7b\x10\x52\x22\xc5\x8e\x5e\x62\xbc\x43\x7b\xd1\xdd\xd9\xdc\xaf\x84\x26\xbc\x3f\x3f\x3b\x1c\x66\x5d\x20\x6e\xdb\x19\x7e\x2a\x16\x9d\xd2\x20\xff\xb0\x1e\x4e\x8b\x9d\x88\x13\x79\xd7\x48\x1f\xed\xdd\x85\xe3\x3c\x53\xbc\xc6\x03\xed\x8d\x84\xa5\xb5\x9b\x0d\x62\xcd\x59\xdf\x9b\x3a\x59\x2b\x3f\x99\x42\x85\x82\x01\xe7\x86\x06\x22\x9c\xb1\xdb\x42\x68\x6a\xf2\x0e\x45\xd5\x57\xc4\xf9\x91\x61\xac\x7a\x46\x5e\x78\x5c\x70\x83\x79\x34\x6f\x0c\xfe\xee\xbb\xe4\x49\x26\x9e\x30\x30\xe9\xf6\x98\x74\xf3\x28\x51\xf2\x02\xb3\x75\x36\x85\xff\x20\x33\xcb\xd7\xda\x36\xc5\x79\x16\x2e\x88\xbc\xdd\xf0\xf9\x84\xa0\x16\xce\x2b\xd9\x68\xe1\xba\x60\xb4\x5a\x8e\x47\x69\xbb\xeb\x62\x47\xdc\x47\x25\xeb\xca\x76\xac\x37\xdb\x59\xb7\xa1\xfe\xb0\x79\xb4\x2c\x6c\xb4\x10\x4b\x79\xf9\xf2\xea\xe1\xff\xa9\xc3\x6f\x63\xf6\x75\x5d\xa9\xbf\xab\xb6\xe6\x89\xd4\xf8\xd8\x4a\x5f\x0f\xc2\x47\x19\xd2\xe9\x9b\x0d\xfa\x16\x81\x07\x3e\x9e\x2d\xa7\x96\x84\x8d\x1f\x49\x9d\x3b\x74\xdb\x13\x5f\x31\xf8\x40\x30\x30\x20\xae\xd5\xef\xd3\x51\x2c\x36\x3c\xc6\x62\x96\x11\xfa\xe4\xd3\xc8\xf3\xe4\xeb\x4a\xf2\x99\x84\x83\x13\xae\xee\x02\x29\xcf\x46\x5e\x6a\x45\x1e\xcd\xac\x35\x61\x91\x5f\x5d\x5c\x5d\xf6\x20\xdd\xe2\x5a\x91\x77\xfb\x37\x8a\x18\xe2\x3b\x29\x4c\x48\xd7\x23\xa4\x5c\x2b\x36\x2b\xa2\xdc\x8c\x5a\xc1\xd4\xed\xb6\x37\xbe\x2a\x0a\x15\x2f\x59\x78\x78\xbf\x62\xf2\x3e\x82\x71\x78\x3f\xf0\xb7\xc3\x01\x5c\xa0\x02\x5f\x59\x3d\x0b\xdf\xbd\x46\xfd\x74\xf8\xad\xdb\xe0\x97\xba\x55\xff\xe6\xd3\x5d\x47\xbc\x68\xda\x1e\x88\x1a\xd7\xd2\x30\x30\x85\xf5\x04\x36\x08\x43\x25\xf6\xe1\x72\x4a\x6f\x87\x2b\x4a\x43\xda\xda\x4d\x53\x83\x22\x6a\x90\xc0\x1a\x20\x5b\x21\x7c\xe8\xbf\x16\xb1\xf6\xa6\xa6\xe1\x06\xb2\x30\xd4\xdd\x7f\x4d\x3e\x59\x83\x93\xf4\xcd\xeb\x60\x40\x7a\x07\x19\x37\xa7\xf1\xb5\x64\x77\xb0\x09\xf6\x8d\xde\xf4\x67\xae\xc9\xe5\xe4\xec\x7f\x01\x00\x00\xff\xff\x24\x36\x94\x78\x61\x1c\x00\x00"),
		},
		"/flux-secret.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-secret.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 137,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xca\x31\x0a\xc2\x40\x10\x85\xe1\x7e\x4f\xf1\x2e\xb0\x82\xed\x1c\x42\x0b\xc1\x7e\xc8\xbe\xc8\x62\xb2\x19\x93\x89\x18\x86\xdc\x5d\x14\x1b\xcb\x9f\xff\xcb\x39\x27\xb5\x7a\xe5\xbc\xd4\xa9\x09\x9e\xc7\x74\xaf\xad\x08\x2e\xec\x66\x7a\x1a\xe9\x5a\xd4\x55\x12\xd0\x74\xa4\xa0\x1f\xd6\x57\xbe\x55\xcf\x85\x36\x4c\x5b\x04\x6a\x8f\xc3\x49\x47\x2e\xa6\x1d\xb1\xef\x3f\xfa\x4d\x41\xc4\xff\x8d\x00\x5b\xf9\x30\xdf\x8c\x82\xb3\xe9\x63\x65\x7a\x07\x00\x00\xff\xff\x40\x21\xa1\xbb\x89\x00\x00\x00"),
		},
		"/memcache-dep.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-dep.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 973,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x53\xcd\x6a\xdc\x4c\x10\xbc\xeb\x29\x0a\xf6\xfa\x49\x46\x06\x7f\x10\xdd\x4c\x9c\x04\x43\x62\x16\x8c\x73\xef\x1d\xb5\xe4\xc1\xf3\x97\x99\x9e\xcd\x2a\xc2\xef\x1e\xa4\x5d\xef\x4a\xb1\xfb\x24\x4d\x55\x57\x57\x4f\xf7\x94\x65\x59\x6c\x60\xd9\x2a\x52\xcf\xdc\xa2\xe5\x60\xfc\x60\xd9\x09\x72\xe2\x16\xbb\x01\x5f\x4d\x3e\x40\x3c\x66\x46\xb1\x81\xf2\x4e\x48\x3b\x8e\xd0\x96\x7a\x86\x65\xa1\x96\x84\xaa\x82\x82\xfe\xc9\x31\x69\xef\x1a\x50\x08\xe9\x6a\x5f\x17\x2f\xda\xb5\x0d\xee\xce\xb2\xc5\x1b\xbd\x29\x00\x47\x96\x9b\x4b\xf5\x71\x84\xee\x50\x3d\x90\xe5\x14\x48\x31\x5e\x5f\x4f\xa4\xf9\xb7\xc1\x38\xae\xd1\x71\x04\xbb\x76\xa2\xa5\xc0\x6a\x52\x8c\x1c\x8c\x56\x94\x1a\xd4\x05\x90\xd8\xb0\x12\x1f\x27\x04\xb0\x24\xea\xf9\x3b\xed\xd8\xa4\xe3\xc1\x3b\x03\x05\x20\x6c\x83\x21\xe1\x53\xca\xc2\xec\x14\x66\x95\xfd\x51\x3e\xf0\x66\x65\xc6\x7d\xcb\x8f\x2b\x13\x53\xec\x58\xa8\x7a\xc9\x3b\x8e\x8e\x85\x53\xa5\xfd\x95\x4f\x0d\x8c\x76\xf9\x70\x22\x9d\x2f\xf9\x5c\xac\xfc\xb0\xd8\x14\xf3\x18\x16\x40\x53\x57\xff\x57\x9f\x4a\x32\x41\x3b\x5e\xb3\xb6\xd9\x98\xad\x37\x5a\x0d\x0d\xee\xbb\x07\x2f\xdb\xc8\x69\x9a\xca\x1b\x8b\x62\xbf\x68\xaf\x44\x69\x71\x53\x5f\x03\xd8\xe0\x07\x1d\xb4\xcd\x76\xaa\xe3\xe3\x30\x6d\x44\x4e\xfc\x1f\xb4\x83\xe5\x9e\x76\x83\x70\x5a\x26\xde\xe3\xc6\x62\x95\x98\xf4\x1f\x46\xe7\x23\xbc\x63\x68\x61\xbb\xa4\x07\xd4\xf5\x75\x5d\x63\x83\x3b\xee\x28\x1b\x41\xf0\xf1\xe2\x6b\x33\x71\xf6\xfb\xe3\xe7\x93\x53\xde\xce\x3b\x2a\x1e\x3d\x0b\x8c\xef\x13\x7c\x07\x26\xf5\x8c\xc8\xbf\x32\x27\x01\xb9\x16\x91\x53\xf0\x2e\x71\x75\x16\x9a\x54\x57\x1d\x1e\x6f\x55\x19\xcd\x4e\x2e\x0d\x2c\x26\xb0\xf5\x51\x9a\xa3\xbb\xd3\x82\xde\xb6\xed\x23\xab\x1c\xb5\x0c\x9f\xbd\x13\x3e\xc8\xbc\xa8\xc7\x48\x6b\xa4\x59\x48\xc6\xec\x6e\xd3\x53\xe2\x78\x92\xfb\x17\xfa\x16\x7d\x0e\xef\x31\x32\xc6\xff\xde\x46\xbd\xd7\x86\x7b\xfe\x92\x14\x19\x92\xf9\x91\x75\x64\x12\x5f\x1e\xc1\xdf\x00\x00\x00\xff\xff\xe0\xf7\x02\x6a\xcd\x03\x00\x00"),
		},
		"/memcache-svc.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-svc.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 206,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8c\x3d\x0e\x02\x21\x10\x46\x7b\x4e\xf1\x5d\x00\x13\x2c\x39\x84\x8d\x89\xfd\x04\x3e\x23\x51\x58\x02\x64\x9b\xc9\xde\xdd\xb0\x6b\xe3\x76\xf3\xf3\xde\xb3\xd6\x1a\xa9\xe9\xc1\xd6\xd3\x52\x3c\x56\x67\xde\xa9\x44\x8f\x3b\xdb\x9a\x02\x4d\xe6\x90\x28\x43\xbc\x01\x8a\x64\x7a\x64\xe6\x20\xe1\xc5\xa8\x8a\xf4\xc4\xe5\x26\x99\xbd\x4a\x20\xb6\xed\x07\xed\xab\x87\xea\xff\x57\x15\x2c\x71\x62\xbd\x32\xcc\x62\x5d\xda\xe8\x73\x00\xec\x39\xbf\x5f\x0f\xc4\xc3\xb9\xab\x73\x06\xe8\xfc\x30\x8c\xa5\x1d\xce\xd9\xf8\x06\x00\x00\xff\xff\x20\x2f\xef\xba\xce\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-account.yaml.tmpl"].(os.FileInfo),
		fs["/flux-deployment.yaml.tmpl"].(os.FileInfo),
		fs["/flux-secret.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-dep.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-svc.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
