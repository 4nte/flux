// Code generated by vfsgen; DO NOT EDIT.

package install

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
		},
		"/flux-account.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-account.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 836,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4b\xaf\xd3\x30\x10\x85\xf7\xfe\x15\x47\xba\x8b\x0b\xe8\x26\xa8\x3b\x94\x5d\xdb\x05\x0b\x10\x8b\xf0\xd8\x20\x16\x63\x7b\x42\x4d\x5d\x3b\xf2\x23\x3c\xa2\xfc\x77\x94\xa4\x95\x9a\xb6\x20\x55\xba\x3b\x7b\x7c\xc6\x73\xe6\xe8\x2b\x8a\x42\x3c\xe0\xd3\x8e\x11\x39\x74\x46\x31\x48\x29\x9f\x5d\x7a\x82\xb2\x39\x26\x0e\x08\xde\x72\x7c\x02\x39\xbd\x28\x41\x1a\xa7\x8d\xfb\x0e\x0a\x2c\x1e\xe0\x9d\xfd\x0d\xc7\xac\x59\xa3\xf1\x01\xef\xb2\xe4\xe0\x38\x71\xc4\x4f\x93\x76\x53\x4b\x21\x29\xb2\x1e\x27\x70\x8c\x50\xde\xa5\xe0\x2d\x5e\xd4\x9b\xf5\xf6\x65\x29\xa8\x35\x5f\x38\x44\xe3\x5d\x85\x6e\x25\xf6\xc6\xe9\x0a\x1f\x67\x57\xeb\xd9\x94\x38\x70\x22\x4d\x89\x2a\x01\x58\x92\x6c\xe3\x78\x02\x1c\x1d\xb8\x42\x63\xf3\x2f\x71\x7e\xe9\x7b\x98\x06\xe5\x07\x3a\x70\x6c\x49\x31\x86\xe1\xf8\x3e\x5d\x2b\xf4\xfd\xf2\xb5\xef\xc1\x4e\x0f\x83\x18\x73\x39\x37\x14\x24\xa9\x92\x72\xda\xf9\x60\xfe\x50\x32\xde\x95\xfb\x37\xb1\x34\xfe\x75\xb7\x92\x9c\xe8\xe4\x77\x3b\x27\x54\x7b\xcb\xf7\x9a\x15\x21\x5b\x9e\x24\x05\xa8\x35\x6f\x83\xcf\x6d\xac\xf0\xf5\xf1\xd5\xe3\xb7\xa9\x2f\x70\xf4\x39\x28\x5e\x14\x3b\x0e\xf2\xac\x50\xc0\x79\x57\x1f\x85\x9f\xeb\xf7\xff\xd6\x3e\xc3\x86\x9b\x99\x80\xfb\x17\xf5\x96\x6b\x6e\x46\xd1\x69\xd1\xff\xcc\x17\xc0\x75\xb6\x8b\xff\x62\x96\x3f\x58\xa5\x63\x76\x37\xc1\xb9\xb2\x73\x89\xc1\x25\x27\xb7\xc8\xb0\x71\x3c\x69\x6e\x28\xdb\x34\xa3\x32\x12\xf5\x37\x00\x00\xff\xff\xfd\x7f\x67\x6a\x44\x03\x00\x00"),
		},
		"/flux-deployment.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-deployment.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 7263,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\xdd\x6f\x1b\x37\x12\x7f\xf7\x5f\x31\x50\x0e\x48\x0c\x48\x2b\x3b\x6e\x8b\xc3\xf6\x5c\x5c\x9a\x0f\x37\x97\x26\x35\xec\xe4\x0e\x7d\xaa\x29\xee\x48\x4b\x88\x4b\xee\x71\xb8\x52\x17\x46\xff\xf7\xc3\x90\xfb\xc1\x95\x65\xa7\xe8\xdb\xf9\x21\xb1\xc9\xe1\x70\xe6\x37\xdf\xdc\xc5\x62\x71\x22\x6a\xf5\x6f\x74\xa4\xac\xc9\x41\xd4\x35\x2d\x77\xe7\x27\x5b\x65\x8a\x1c\xde\x60\xad\x6d\x5b\xa1\xf1\x27\x15\x7a\x51\x08\x2f\xf2\x13\x00\x23\x2a\xcc\x61\xad\x9b\xdf\xef\xef\x41\xad\x21\xfb\x24\x2a\xa4\x5a\x48\x84\x3f\xfe\xe8\xf6\xc3\x9f\x39\xdc\xdf\x4f\x77\xef\xef\x01\x4d\xc1\x64\x54\xa3\x64\x66\x0e\x6b\xad\xa4\xa0\x1c\xce\x4f\x00\x08\x35\x4a\x6f\x1d\xef\x00\x54\xc2\xcb\xf2\x67\xb1\x42\x4d\x71\x21\xbd\x9b\xa9\xbd\x13\x1e\x37\x6d\xdc\xf4\x6d\x8d\x39\xdc\xa0\x74\x28\x3c\x9e\x00\x78\xac\x6a\x2d\x3c\x76\xcc\x12\x0d\xf8\x47\x18\x63\xbd\xf0\xca\x9a\x81\x39\x40\xed\x6c\x85\xbe\xc4\x86\x32\x65\x97\xb5\x75\x3e\x87\xd9\xc5\xd9\xc5\xf9\x0c\x9e\x81\x47\xad\x13\x0a\xf0\x16\x48\x3a\x51\x23\x2c\x2b\xf4\x4e\x49\x62\xe5\x6a\xab\x8c\x7f\x4e\xc0\x87\xb3\x8e\xb1\x9e\xe8\x70\xa0\x05\x40\x8f\x45\xd8\xb2\x05\xde\x4e\x50\xe0\x9f\x15\x7a\x91\x6d\x9b\x15\x3a\x83\x1e\x83\x70\x96\x72\xd0\xca\x74\x2c\x18\x3a\xb7\x53\x12\x5f\x49\x69\x1b\xe3\x3f\x4d\x6f\x00\xd8\x59\xdd\x54\x38\xc8\xb0\xe8\x64\xd8\x28\xbf\xd8\x62\x3b\x5c\x44\x0c\x9f\x1f\x2f\xee\x57\x46\x7e\x0b\x3e\x52\x04\xcf\x48\xa8\x0a\x5c\x8b\x46\xfb\x8f\xb6\xc0\x1c\xce\xbe\x39\x3b\x83\x67\xb0\x2f\xd1\x40\xc5\xd2\x60\x01\x0e\x45\xb1\xb0\x46\xb7\x73\xd8\x23\xec\xad\x79\xee\x61\x85\x20\x56\x1a\x19\x48\x59\x56\xb6\x38\xe9\x18\x3e\x83\xcf\xa5\x22\x50\x04\x02\x7c\x55\xaf\x09\x1a\xc2\x02\xd6\xd6\xc1\x06\x0d\x3a\xe1\x95\xd9\xc0\xed\xed\x4f\xb0\xc5\x96\x32\x78\x6f\xe0\xc3\xdf\x09\x7e\xb8\x84\xf3\xec\xfc\x6c\x3e\x70\xe9\xef\x8e\x2a\x10\x08\x87\xa9\x1c\x64\x59\x14\x83\x58\x80\x00\xc2\x5a\xb0\x37\x75\x40\xc1\x1e\x07\x36\x52\x18\xd8\x3b\xe5\x59\xd0\xec\x38\x7e\x1b\x34\x03\x18\x58\xd5\xbe\x7d\xa3\x5c\x0a\x62\x85\x85\x6a\xaa\x1c\x3e\x62\x65\x5d\x9b\xea\x89\xb0\xb6\x5a\xdb\x3d\x6b\xd4\x5d\xad\x28\xa8\xda\x10\xaf\x09\x90\x0d\x79\x5b\x29\x46\x60\x6b\xec\xde\xfc\x56\x5a\xf2\x34\xb0\x58\x2b\x8d\x73\xd8\x97\x4a\x96\xd0\xda\x06\xf6\x4a\xeb\xa8\x94\xb7\x50\x58\x0e\x50\x5e\xe6\x43\xfc\x8b\x03\xbb\x37\x2c\xf6\xc0\xc0\x61\x6d\xc1\x09\x5f\xa2\x03\x5f\x0a\xd3\x5d\xbc\x51\xbe\x6c\x56\x60\x79\x11\x41\xab\x2d\x66\xf0\xab\x6d\x9e\x6b\x0d\x42\x93\xed\xaf\x98\x82\x0d\xca\x83\x32\xde\x86\x33\xd2\x1a\x2f\x94\x41\x37\x87\x15\x6a\xbb\xcf\xe0\x16\x47\x54\x4b\xef\x6b\xca\x97\x4b\xf6\x29\x59\xb0\x47\x6b\xdc\x08\xd9\x86\x85\xe5\xa6\x51\x05\xd2\xb2\x21\x5c\xd4\x4e\xed\x84\xc7\xe0\x77\xac\xc5\x72\x60\xd1\x1b\x81\xa8\x5c\x48\x6b\xd6\x6a\x33\x6c\x01\xc4\x85\x8f\xa2\xce\x93\xc5\x34\xf4\x16\xc9\xb1\xbf\x6a\x90\x10\x93\xcb\xc8\x64\xf4\xbb\xaf\x1a\x63\xaf\xa8\xe4\x95\x52\xec\x10\x04\x14\x6a\xbd\x46\xc7\x69\xb6\xe7\xd0\x85\xd3\x98\x4a\x03\xf6\x91\x5d\x8a\x3e\xa7\xa3\x9d\x2a\xb0\xc7\x7b\xad\x36\x95\xa8\x47\x41\x94\x2f\x41\x18\x40\xe3\x5d\x1b\x74\xb8\x8b\x44\x77\x73\x10\xa6\x80\xc6\x48\x5b\x71\x7e\x0f\xe7\xa3\xb6\x1f\x83\x1d\x85\x29\x06\x2e\x68\x76\x81\x83\x42\xea\x0c\xf9\xc0\x02\x0c\xc3\x5f\xb0\x40\x72\xec\xab\x16\x08\x29\xc0\x5b\x50\x15\x67\x56\xb8\xba\xbe\x0a\xd1\x0f\x2f\x58\x2d\x52\x1b\xa3\xcc\x78\x39\x2b\xb7\x43\xa7\xd6\x4a\x86\x14\x0f\x75\xe3\x6a\x4b\x48\xa7\x7f\x02\xc8\x81\x4b\xcc\x1b\x11\x45\x06\x88\xef\xfb\x13\xc0\x81\x70\x9b\x31\x3e\x1f\x41\x6c\x53\x6f\x38\x71\x50\x02\xcd\x34\xf7\x3e\x7b\x24\xfb\x3e\x3c\x77\x24\xfb\xf6\x70\x0e\x21\xf8\x20\xf1\x27\xa5\xa1\x43\xdd\x61\x48\x90\xc6\xc2\x2c\xe7\xb2\x49\x7e\x06\xaa\x12\x1b\x8c\xde\xcf\x07\x32\x78\xa7\x4c\x11\x74\xae\x38\x9f\x38\x94\xa3\xd7\xc6\x5c\xa2\x51\x10\x72\xd6\x08\x47\xd9\x08\xdc\x59\x80\xf0\x43\xc0\x97\xcd\x2a\x2b\xac\xdc\xa2\xcb\xa4\xad\x96\xae\xcb\x00\x31\xee\xbd\x18\xa0\xeb\xed\xc8\x1d\x02\x77\x0f\x7c\xab\x17\x1b\x60\x49\xb3\x81\x26\x5c\x93\x43\xc7\x50\xd9\x94\x5b\x7e\x9e\xbd\x7c\x99\xbd\x9c\xd2\x5e\x37\x5a\x5f\x5b\xad\x64\x9b\xc3\xfb\xf5\x27\xeb\xaf\x1d\x52\xaa\x85\x43\xb2\x8d\x93\x48\x69\x02\x77\xf8\xdf\x06\xc9\x4f\xd6\x00\x64\xdd\xe4\xf0\xed\x59\x35\x59\xac\x42\x8e\xcf\xe1\xbb\x6f\x3e\xaa\xb1\xb1\xb0\x2e\x3d\xbc\x18\x2d\x73\x1d\x9a\x8c\x8b\xb3\x0b\x2e\x99\xca\xac\xad\xab\x82\xcb\x0a\x3d\x50\x6b\xb5\x43\x83\x44\xd7\xce\xae\x30\x95\x80\x21\xbd\x9a\x96\xeb\x78\x55\x64\x38\x5d\x16\xbe\xcc\x61\x29\x6a\x15\x91\xde\x7d\xb7\x54\x05\x1a\xaf\x7c\x9b\xd5\xcd\x2a\xa1\x55\x46\x79\x25\xf4\x1b\xd4\xa2\xbd\xe5\xf8\x2c\x28\x87\x6f\x13\x02\xaf\x2a\xb4\x8d\x3f\xb2\xc7\xd5\x55\xfd\x7f\x88\x9a\x04\xed\xc4\x30\xc7\xfb\x22\x88\xf5\xed\x3a\x4a\x86\x5e\x06\xc9\x8a\x25\x51\xc9\x9d\xa1\x8d\xbd\x2a\x68\xdb\xe5\x9b\x0d\x9b\x0c\x94\x89\x3e\xf7\x9c\xe2\x19\xa2\x72\x39\x49\x93\x3d\x66\xbf\x18\xdd\xe6\xe0\x5d\x83\xcc\x8d\x9b\x9f\x90\xa1\x56\x5d\x62\xe7\x90\xaa\xd1\xad\xad\x93\xc8\x4c\x63\xb7\xc3\xcd\xce\x63\x82\xa7\x0d\xc9\x54\xf6\x9d\x70\x9d\xec\x91\xec\xaf\x89\x9f\xc4\xe8\x7b\x23\x75\x13\x32\x27\xf7\x6c\xb1\xc0\xf5\x59\x35\x36\x05\x5f\xe9\x61\xfa\x2e\xe6\x7b\x3e\x7a\xd0\x5f\x0c\xd9\x15\x0a\x94\x5a\x38\xee\xd5\x56\x76\x97\x24\x80\x27\xda\x80\x98\x1e\x53\xe5\x9d\xb5\x7e\x99\x11\x95\x8f\x2a\x20\xcc\xe4\xd6\xd9\x58\xa2\x66\xf1\xe6\x79\x4f\x92\x70\x40\xb3\x53\xce\x9a\x50\x10\x62\xad\x9d\x7d\xf8\xf2\xe3\xdb\xd7\xbf\x7c\x7a\xf7\xfe\x6a\x16\x4b\xc0\x9c\xf1\xb0\x3b\x74\x6e\x5a\xaf\x13\x36\xa1\xc4\xad\xda\x58\x4d\xbd\x3e\xa6\xe3\x83\x42\xfb\x50\xc7\xd1\x39\x99\xf8\x51\x45\xb9\xe6\xf1\xa8\xd2\xdf\xc6\x29\x3a\x69\x45\x3a\xe9\x82\x4d\x12\x16\x87\x0d\x4d\x6a\xf4\xd0\xcd\xf4\x3d\xb7\x30\x20\xb4\x47\x67\xb8\xa7\x7e\x20\xf1\xda\xd9\x8a\xdd\xa2\xef\x58\xe6\x20\x88\xdd\xad\xab\xaa\x0c\x83\xb6\x72\x4b\x0f\x8d\x8d\x66\x97\x1f\xc1\x65\x84\x7b\x82\xcb\x4e\xe8\x06\x1f\x60\xf2\x35\x27\x3e\xf4\x81\xbe\xe6\x3e\xe1\x01\x5c\xf2\xa7\xa5\xfe\x89\x62\xff\x88\x5f\x32\x55\xec\x6e\x26\x74\xd3\xfc\xf0\xb5\xc8\xdb\x0b\x6e\x4a\x2c\x50\x53\xd7\xba\x85\x9f\x3e\x7f\xbe\x86\x95\x20\x25\x41\x34\xbe\x04\xe9\x30\x64\x52\xa1\x63\x55\x1f\x07\x01\x66\xb8\x53\x22\x28\x7e\x77\xf5\xfe\xf3\x6f\xaf\xbe\x7c\xfe\xe9\xcb\xed\xdb\x9b\xbb\xa0\xee\xb0\xf4\xe1\xed\xaf\x77\x13\x87\xdf\x09\xa7\x78\x8c\xa3\xbe\x41\x4e\x18\xc6\xf6\xe5\xc0\x7e\xef\x9c\xad\xa6\x36\x8c\x64\x37\xb8\xce\x27\x9a\x4f\x7a\x45\x4e\x6c\xac\xc2\x08\x00\x63\x9e\x4f\xf0\x88\x10\xc4\xe1\x14\x0b\xae\xc4\x52\xc8\x12\x0b\x76\xad\xd4\xb7\x87\xb6\x9a\x91\x62\xee\xf3\x84\x8b\x75\x5d\xdf\x9c\x1c\xe8\x86\xeb\x70\x70\x1e\x2e\xe1\xa1\xb0\xc3\xd8\x97\x48\xa9\x2f\x8c\xdd\xab\xdf\x5b\x96\xb2\x61\x9c\x42\xc4\x85\x27\x84\xe0\x88\x50\xda\x7d\x18\x7c\xad\x31\x28\x83\xc9\x94\x9f\xfa\xce\x62\x31\x28\x10\x06\x1f\xbe\xfc\x72\x58\xca\xba\xa6\x2f\xa3\x9d\xcc\xa4\x6e\xc8\xa3\xcb\x38\x81\xeb\x14\x92\x2f\x14\x73\xcd\x08\xc5\xeb\x48\xfa\xfe\x7a\xa2\x14\xa7\x1d\x42\x1f\x06\xeb\xa9\x67\x8f\x32\xf4\xf4\xec\x5d\xde\x31\x65\x18\x75\x93\x12\x94\x4a\xdc\x51\x5f\x9e\x4c\xba\x4c\x45\x50\x35\x14\x46\xff\x80\x9e\xc2\x22\x86\xd3\x2a\x14\xb6\xd0\xe3\x85\x89\xff\x45\x3f\x46\x9f\xa6\xb2\xf4\xc9\x25\x86\x21\x3b\x70\x32\xf8\x4f\x04\xe1\x62\x10\x0b\xdc\xa2\x50\xee\xf2\x41\xd9\x4b\xc5\xba\x49\x3a\xcc\xd1\x78\x5f\x6e\x7e\x8e\x2f\x13\xc2\x6c\xe2\xde\x95\xf2\x61\x5a\x26\xe5\xad\x6b\x87\x74\xfd\x8e\x3b\xe3\x84\xdd\x53\x31\xc7\x6e\x93\xe8\xde\x85\xcc\xd1\x70\x4a\x63\xa1\xef\x9d\xff\xf6\x22\x8d\xcc\xd3\x7c\xfc\xfb\xc3\xdb\x5f\x4f\xff\x19\x67\xf6\xd0\x56\x37\x84\x6e\x39\x0a\x9b\xa5\x81\xce\xf8\x70\x38\x35\x4e\x5f\xde\xdf\x43\x76\xa5\x3c\x2b\x1b\x1e\xef\xa6\x14\x2b\x27\x8c\x2c\x7b\xa2\x1f\xc3\x5f\xf1\x19\x4f\xad\xc3\x12\xe7\x2f\x3a\x76\x92\x7b\x38\x3e\x77\x1b\x3c\x85\xfe\x65\x95\x49\x0e\xcc\xe6\xb3\xee\x35\x50\x13\xa6\xc7\x9f\x4e\x6a\x0e\xd9\xf1\x64\x9c\xba\x2a\x61\xd4\x9a\x7b\x72\x8e\x21\x52\x05\xba\x68\x8e\x83\xc9\x26\x3c\x46\x58\x42\x68\x4c\x81\xee\xc0\xc6\x0e\xb5\xf0\x6a\x87\xa1\xe5\xa4\xde\x03\x37\x13\x3b\x1f\xc4\xe4\xa0\x1c\x35\xab\x42\xb9\xf3\x79\xfc\xff\xe5\xf0\xb4\x39\x82\x13\x9e\x2e\x8f\x81\x13\xde\x03\x7b\x54\x7b\xaa\x23\x0c\xbe\x10\xba\x63\xe7\xd9\xb8\x83\xe5\x98\x06\x8e\x9f\x7f\x5b\x09\x75\x54\x00\xe4\x8d\x9e\x43\x4f\x35\x3e\xce\x1e\x35\x07\x72\x2a\xd9\x5b\x06\x14\x4d\x78\xb7\x63\x9c\xb8\x62\x2b\x7f\x30\x80\xa7\x58\x75\xb5\xaf\xab\x6c\x97\x4f\x94\xba\xfe\x44\xc7\x8b\x4f\x5d\xfe\x63\x8b\x2d\xa8\xe2\x87\x81\xec\x89\x76\x26\x91\x8a\x59\x08\xdf\x38\x9c\xbc\x02\x1c\xb9\x2b\x6c\xb7\x8b\x81\x9e\x26\xe9\xaa\xcf\xd6\xa0\x3c\x94\x82\x42\x29\xb6\x46\xb7\x20\xa4\x44\x8a\x19\xbd\xc4\xf8\x82\xf6\xa2\x7f\xb3\xb9\x5b\x0b\x4d\x78\x77\x7a\x72\x7f\xbf\xe8\x0d\x71\xd3\xd5\xf0\x63\xb6\xe8\x99\x06\xfa\x87\xf1\x70\x9c\xec\x88\x9d\xc8\xbb\x46\xfa\x28\xef\x3e\x8c\xf3\xdc\xe2\x35\x1e\xa8\x35\x12\x56\xd6\x6e\xb7\x88\x35\x7b\xfd\x20\xea\x6c\xa3\xfc\x6c\x0e\x15\x0a\x06\x9c\x13\x1a\x88\x30\x63\x77\x81\xd0\xd4\xe4\x1d\x8a\x6a\x88\x88\xd3\x03\xc1\x98\xf5\x82\xbc\xf0\x78\xc9\x09\xe6\x51\xbf\x31\xf8\xbb\xef\x9d\x27\xa9\x78\xc2\xc0\xac\xbf\x63\xd6\xd7\xa3\x84\xc9\x0b\xcc\x36\xd9\x1c\xfe\x83\xdc\x59\xbe\xd6\xb6\x29\x4e\xb3\xf0\x40\xe4\xed\x96\xe7\x13\x82\x5a\x38\xaf\x64\xa3\x85\xeb\x8d\xd1\x71\x39\x2c\xa5\xdd\xad\x97\x7b\xe2\x3c\x2a\x99\x57\xb6\x67\xbe\xd9\xde\xba\x2d\x0d\xc3\xe6\xc1\xb1\x70\xd1\xa5\x58\xc9\xf3\x97\x17\x0f\xff\x4d\x15\x7e\x1b\xbd\xaf\xcf\x4a\xc3\x4b\xb5\x35\x4f\xb8\xc6\xc7\x8e\xfa\x6a\x24\x3e\xf0\x90\x9e\xdf\x62\xe4\x77\x19\xfa\xc0\xc7\xbd\xe5\xd8\x91\x70\xf1\x23\xae\x73\x8b\x6e\x77\xe4\x1b\x06\x0f\x04\x63\x07\xc4\xb1\xfa\x7d\x5a\x8a\xc5\x96\xcb\x58\xf4\x32\x42\x9f\x7c\x18\x79\x9e\x7c\x5b\x49\x3e\x92\xb0\x71\xc2\xd3\x5d\x68\xca\xb3\x89\x96\x5a\x91\x47\xb3\xe8\x44\xb8\xcc\x2f\xce\x2e\xce\x07\x90\x6e\x70\xa3\xc8\xbb\xf6\x8d\x22\x86\xf8\x56\x0a\x13\xdc\xf5\x00\x29\xd7\x91\x2d\x8a\x48\xb7\xa0\x8e\x30\x55\xbb\xcb\x8d\xaf\x8a\x42\xc5\x47\x16\x2e\xde\xaf\xb8\x79\x9f\xc0\x38\xee\x8f\xfd\xdb\xfd\x3d\xb8\xd0\x0a\x7c\xe5\xf4\x22\x7c\xf5\x9a\xe4\xd3\xf1\xb7\xfe\x82\x5f\xea\x8e\xfd\x9b\x4f\xb7\x7d\xe3\x45\xf3\x6e\x20\x6a\x5c\xd7\x86\x81\x29\xac\x27\xb0\x81\x18\x2a\xd1\x86\xc7\x29\xbd\x1b\x9f\x28\x0d\x69\x6b\xb7\x4d\x0d\x8a\xa8\x41\x02\x6b\x80\x6c\x85\xf0\x61\xf8\x56\xc4\xdc\x9b\x9a\xc6\x17\xc8\xc2\x50\xff\xfe\x35\xfb\x64\x0d\xce\xd2\x9d\xd7\x41\x80\xf4\x0d\x32\x5e\x4e\xd3\x67\xc9\x7e\xb0\x09\xf2\x4d\x76\x86\x99\x6b\x76\x3e\x3b\xf9\x5f\x00\x00\x00\xff\xff\x48\xcf\x43\x20\x5f\x1c\x00\x00"),
		},
		"/flux-secret.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-secret.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 137,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xca\x31\x0a\xc2\x40\x10\x85\xe1\x7e\x4f\xf1\x2e\xb0\x82\xed\x1c\x42\x0b\xc1\x7e\xc8\xbe\xc8\x62\xb2\x19\x93\x89\x18\x86\xdc\x5d\x14\x1b\xcb\x9f\xff\xcb\x39\x27\xb5\x7a\xe5\xbc\xd4\xa9\x09\x9e\xc7\x74\xaf\xad\x08\x2e\xec\x66\x7a\x1a\xe9\x5a\xd4\x55\x12\xd0\x74\xa4\xa0\x1f\xd6\x57\xbe\x55\xcf\x85\x36\x4c\x5b\x04\x6a\x8f\xc3\x49\x47\x2e\xa6\x1d\xb1\xef\x3f\xfa\x4d\x41\xc4\xff\x8d\x00\x5b\xf9\x30\xdf\x8c\x82\xb3\xe9\x63\x65\x7a\x07\x00\x00\xff\xff\x40\x21\xa1\xbb\x89\x00\x00\x00"),
		},
		"/memcache-dep.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-dep.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 973,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x53\xcd\x6a\xdc\x4c\x10\xbc\xeb\x29\x0a\xf6\xfa\x49\x46\x06\x7f\x10\xdd\x4c\x9c\x04\x43\x62\x16\x8c\x73\xef\x1d\xb5\xe4\xc1\xf3\x97\x99\x9e\xcd\x2a\xc2\xef\x1e\xa4\x5d\xef\x4a\xb1\xfb\x24\x4d\x55\x57\x57\x4f\xf7\x94\x65\x59\x6c\x60\xd9\x2a\x52\xcf\xdc\xa2\xe5\x60\xfc\x60\xd9\x09\x72\xe2\x16\xbb\x01\x5f\x4d\x3e\x40\x3c\x66\x46\xb1\x81\xf2\x4e\x48\x3b\x8e\xd0\x96\x7a\x86\x65\xa1\x96\x84\xaa\x82\x82\xfe\xc9\x31\x69\xef\x1a\x50\x08\xe9\x6a\x5f\x17\x2f\xda\xb5\x0d\xee\xce\xb2\xc5\x1b\xbd\x29\x00\x47\x96\x9b\x4b\xf5\x71\x84\xee\x50\x3d\x90\xe5\x14\x48\x31\x5e\x5f\x4f\xa4\xf9\xb7\xc1\x38\xae\xd1\x71\x04\xbb\x76\xa2\xa5\xc0\x6a\x52\x8c\x1c\x8c\x56\x94\x1a\xd4\x05\x90\xd8\xb0\x12\x1f\x27\x04\xb0\x24\xea\xf9\x3b\xed\xd8\xa4\xe3\xc1\x3b\x03\x05\x20\x6c\x83\x21\xe1\x53\xca\xc2\xec\x14\x66\x95\xfd\x51\x3e\xf0\x66\x65\xc6\x7d\xcb\x8f\x2b\x13\x53\xec\x58\xa8\x7a\xc9\x3b\x8e\x8e\x85\x53\xa5\xfd\x95\x4f\x0d\x8c\x76\xf9\x70\x22\x9d\x2f\xf9\x5c\xac\xfc\xb0\xd8\x14\xf3\x18\x16\x40\x53\x57\xff\x57\x9f\x4a\x32\x41\x3b\x5e\xb3\xb6\xd9\x98\xad\x37\x5a\x0d\x0d\xee\xbb\x07\x2f\xdb\xc8\x69\x9a\xca\x1b\x8b\x62\xbf\x68\xaf\x44\x69\x71\x53\x5f\x03\xd8\xe0\x07\x1d\xb4\xcd\x76\xaa\xe3\xe3\x30\x6d\x44\x4e\xfc\x1f\xb4\x83\xe5\x9e\x76\x83\x70\x5a\x26\xde\xe3\xc6\x62\x95\x98\xf4\x1f\x46\xe7\x23\xbc\x63\x68\x61\xbb\xa4\x07\xd4\xf5\x75\x5d\x63\x83\x3b\xee\x28\x1b\x41\xf0\xf1\xe2\x6b\x33\x71\xf6\xfb\xe3\xe7\x93\x53\xde\xce\x3b\x2a\x1e\x3d\x0b\x8c\xef\x13\x7c\x07\x26\xf5\x8c\xc8\xbf\x32\x27\x01\xb9\x16\x91\x53\xf0\x2e\x71\x75\x16\x9a\x54\x57\x1d\x1e\x6f\x55\x19\xcd\x4e\x2e\x0d\x2c\x26\xb0\xf5\x51\x9a\xa3\xbb\xd3\x82\xde\xb6\xed\x23\xab\x1c\xb5\x0c\x9f\xbd\x13\x3e\xc8\xbc\xa8\xc7\x48\x6b\xa4\x59\x48\xc6\xec\x6e\xd3\x53\xe2\x78\x92\xfb\x17\xfa\x16\x7d\x0e\xef\x31\x32\xc6\xff\xde\x46\xbd\xd7\x86\x7b\xfe\x92\x14\x19\x92\xf9\x91\x75\x64\x12\x5f\x1e\xc1\xdf\x00\x00\x00\xff\xff\xe0\xf7\x02\x6a\xcd\x03\x00\x00"),
		},
		"/memcache-svc.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "memcache-svc.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 206,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8c\x3d\x0e\x02\x21\x10\x46\x7b\x4e\xf1\x5d\x00\x13\x2c\x39\x84\x8d\x89\xfd\x04\x3e\x23\x51\x58\x02\x64\x9b\xc9\xde\xdd\xb0\x6b\xe3\x76\xf3\xf3\xde\xb3\xd6\x1a\xa9\xe9\xc1\xd6\xd3\x52\x3c\x56\x67\xde\xa9\x44\x8f\x3b\xdb\x9a\x02\x4d\xe6\x90\x28\x43\xbc\x01\x8a\x64\x7a\x64\xe6\x20\xe1\xc5\xa8\x8a\xf4\xc4\xe5\x26\x99\xbd\x4a\x20\xb6\xed\x07\xed\xab\x87\xea\xff\x57\x15\x2c\x71\x62\xbd\x32\xcc\x62\x5d\xda\xe8\x73\x00\xec\x39\xbf\x5f\x0f\xc4\xc3\xb9\xab\x73\x06\xe8\xfc\x30\x8c\xa5\x1d\xce\xd9\xf8\x06\x00\x00\xff\xff\x20\x2f\xef\xba\xce\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-account.yaml.tmpl"].(os.FileInfo),
		fs["/flux-deployment.yaml.tmpl"].(os.FileInfo),
		fs["/flux-secret.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-dep.yaml.tmpl"].(os.FileInfo),
		fs["/memcache-svc.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
